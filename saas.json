{
  "product": {
    "name": "Synera",
    "type": "B2B SaaS",
    "mission": "AI-powered internal talent mobility and career development platform",
    "north_star": "Lift internal mobility and reduce time-to-competency through personalized, explainable career pathways"
  },
  "personas": {
    "hr_director": {
      "goals": ["Reduce turnover", "Increase internal fill rate", "Show HR ROI"],
      "workflows": ["Review mobility dashboard", "Approve policy and governance", "Run quarterly talent reviews"]
    },
    "ld_manager": {
      "goals": ["Align learning to roles", "Track skill development", "Show training ROI"],
      "workflows": ["Publish role competencies", "Attach learning to skills", "Monitor cohort progression"]
    },
    "manager": {
      "goals": ["Grow team capability", "Staff projects faster"],
      "workflows": ["Approve paths", "Post gigs", "Nominate mentees"]
    },
    "employee": {
      "goals": ["See next steps", "Build skills", "Apply internally"],
      "workflows": ["Complete skills profile", "View recommended roles", "Apply to gigs"]
    }
  },
  "value_proposition": {
    "visibility": "Transparent career paths with skill gaps and time estimates",
    "intelligence": "Recommendations using skill similarity plus transition priors",
    "connection": "Internal marketplace of roles, projects, rotations, mentorships",
    "analytics": "Mobility, readiness, and training impact dashboards"
  },
  "architecture": {
    "frontend": {
      "framework": "Next.js 14 + React + TypeScript",
      "ui": "TailwindCSS, React Query, React Flow for path diagrams"
    },
    "backend": {
      "framework": "NestJS (TypeScript)",
      "api": ["REST (MVP)", "GraphQL (Phase 2 for complex reads)"],
      "realtime": "WebSockets for notifications"
    },
    "data": {
      "relational": "PostgreSQL (AWS RDS) for orgs, users, roles, opportunities",
      "graph": "Neo4j for skills, role relationships, and transitions",
      "cache": "Redis for sessions and hot queries"
    },
    "infrastructure": {
      "cloud": "AWS (ECS/EKS, RDS, S3, CloudFront, CloudWatch)",
      "cicd": "GitHub Actions with blue/green deploys",
      "observability": ["Datadog or New Relic", "CloudWatch logs/metrics"]
    },
    "auth_multitenancy": {
      "auth": "Auth0 or AWS Cognito (SAML/OIDC, MFA)",
      "multitenancy": "Row-level isolation by tenant_id; scoped JWT claims",
      "rbac": ["OrgAdmin", "Manager", "Employee", "ReadOnly"]
    }
  },
  "data_model": {
    "entities": {
      "Organization": ["id", "name", "settings", "tenant_id"],
      "User": ["id", "org_id", "email", "name", "role", "current_role_id", "tenant_id"],
      "Skill": ["id", "name", "synonyms[]", "category", "tenant_id"],
      "UserSkill": ["user_id", "skill_id", "proficiency(1-5)", "evidence", "tenant_id"],
      "Role": ["id", "org_id", "name", "family", "level", "tenant_id"],
      "RoleSkill": ["role_id", "skill_id", "required_level(1-5)", "weight", "tenant_id"],
      "TransitionPrior": ["from_role_id", "to_role_id", "probability(0-1)", "source(manual|learned)", "tenant_id"],
      "Opportunity": ["id", "org_id", "type(role|gig|mentorship|rotation)", "role_id", "team", "location", "status", "tenant_id"],
      "LearningItem": ["id", "title", "provider", "url", "mapped_skill_ids[]", "level", "tenant_id"],
      "PathRecommendation": ["id", "user_id", "target_role_id", "score", "gap_skill_ids[]", "learning_item_ids[]", "explanation", "created_at", "tenant_id"],
      "AuditLog": ["id", "actor_id", "action", "entity", "payload", "timestamp", "tenant_id"]
    }
  },
  "apis": {
    "public": [
      {
        "method": "POST",
        "path": "/api/v1/recommendations",
        "body": { "userId": "string" },
        "response": {
          "topRoles": [
            {
              "roleId": "string",
              "score": 0.0,
              "overlap": 0.0,
              "transitionPrior": 0.0,
              "gapSkills": [{ "skillId": "string", "requiredLevel": 3, "currentLevel": 1 }],
              "learning": [{ "learningItemId": "string", "title": "string", "url": "string" }],
              "explanation": "string"
            }
          ],
          "opportunities": [
            { "opportunityId": "string", "type": "gig", "roleId": "string", "matchScore": 0.0 }
          ]
        }
      },
      { "method": "GET", "path": "/api/v1/users/:id/profile" },
      { "method": "GET", "path": "/api/v1/roles/:id" },
      { "method": "GET", "path": "/api/v1/opportunities", "query": ["roleId", "team", "location", "status"] },
      { "method": "POST", "path": "/api/v1/import/csv", "body": { "type": "users|roles|skills|roleSkills", "file": "multipart" } }
    ],
    "admin": [
      { "method": "POST", "path": "/api/v1/roles" },
      { "method": "POST", "path": "/api/v1/skills" },
      { "method": "POST", "path": "/api/v1/transitions" },
      { "method": "POST", "path": "/api/v1/opportunities" },
      { "method": "GET", "path": "/api/v1/analytics/mobility" }
    ]
  },
  "ai_engine_mvp": {
    "approach": "Rule + Probability hybrid (explainable)",
    "similarity_metric": "Jaccard similarity over skill sets",
    "transition_prior": "Markov-style prior P(current_role → target_role) seeded manually and updated from observed moves",
    "scoring": {
      "formula": "score = alpha * jaccard + (1 - alpha) * prior",
      "alpha_default": 0.6,
      "explanation": "Return overlap%, prior% and top 3 missing skills with learning links"
    },
    "algorithm_steps": [
      "Load user skills and current role",
      "Enumerate candidate roles by family or adjacency",
      "Compute Jaccard(user_skills, role_required_skills)",
      "Get transition prior for current→candidate",
      "Score, rank, and compute gap skills and learning items",
      "Return top 3 with explanations and matching opportunities"
    ],
    "persistence": "Store recommendations and feature inputs for offline evaluation"
  },
  "ai_engine_phase2": {
    "improvements": [
      "Learn transition matrix from tenant history; backfill with industry priors",
      "Use Neo4j GDS embeddings + KNN rerank for semantic similarity",
      "Introduce MDP for multi-step career planning optimizing readiness/retention",
      "Churn-risk early warning features to trigger proactive nudges"
    ]
  },
  "security_compliance": {
    "privacy": ["GDPR/CCPA consent screens", "Data minimization", "Right to access/delete"],
    "security": ["PII encryption at rest (KMS) and transit (TLS)", "RBAC", "Audit logs", "Secrets in AWS SSM"],
    "tenancy": ["Row-level isolation", "Per-tenant encryption keys (phase 2)"],
    "certification_runway": ["SOC2 Type I in 6 months", "SOC2 Type II in 12–18 months"]
  },
  "metrics": {
    "activation": ["% employees with completed profile (14 days)", "manager adoption rate"],
    "mobility": ["internal applications/employee", "internal fill %", "lateral vs vertical moves"],
    "development": ["avg skills gap closed/quarter", "time-to-competency by role family"],
    "engagement": ["WAU/MAU", "path view→apply conversion", "path usefulness rating"],
    "business": ["retention delta in pilot cohorts", "recruiting cost savings"]
  },
  "mvp_scope": {
    "features": [
      "Multitenant orgs and SSO",
      "Skills profiles and editor",
      "Role/skill library and CSV import",
      "Path recommendations (top 3) with explainability",
      "Internal opportunity board and apply/interest",
      "Analytics v1: mobility and activation"
    ],
    "non_goals": [
      "Deep HRIS/LMS integrations (CSV first)",
      "Mobile apps (responsive web only)",
      "Advanced ML/RL (post-pilot)",
      "Microservices (modular monolith first)"
    ]
  },
  "roadmap_90_days": {
    "sprint0_setup": ["Repos, CI/CD, environments", "Auth + multitenancy skeleton"],
    "sprint1_auth": ["RBAC, tenant context, org invite flow"],
    "sprint2_ingest": ["CSV importers for users, roles, skills"],
    "sprint3_profiles": ["Skills profile UI, manager confirm"],
    "sprint4_pathing": ["Jaccard+prior engine, React Flow path UI"],
    "sprint5_marketplace": ["Post gigs/roles, apply/interest, manager approvals"],
    "sprint6_analytics": ["Mobility dashboard, Segment events"],
    "sprint7_hardening": ["Perf, indexes, rate limiting, audit logs"],
    "pilot": ["Onboard 1–3 design partners", "Collect baseline and 90-day outcomes"]
  },
  "ux_flows": {
    "employee": [
      "Complete skills profile",
      "See recommended roles and skill gaps",
      "Enroll in learning items",
      "Apply or express interest in internal opportunities"
    ],
    "manager": [
      "Review team readiness",
      "Approve development paths",
      "Post gigs/rotations/mentorships",
      "Nominate employees to opportunities"
    ],
    "admin": [
      "Manage skills ontology and role families",
      "Import/export data",
      "Configure mobility rules and approvals",
      "View analytics and export reports"
    ]
  },
  "testing": {
    "unit": ["Similarity calc", "Scoring function", "Gap detection"],
    "integration": ["API endpoints", "CSV ingest", "Auth flows"],
    "e2e": ["Create org → invite users → import data → generate paths → apply to gig"],
    "offline_eval": ["Top-K hitrate on known internal moves", "A/B alpha values and click/apply rate"]
  },
  "deployment": {
    "environments": ["dev", "staging", "prod"],
    "release": ["Feature flags for engine params", "Blue/green deploys", "Rollbacks with database migrations tracked"]
  },
  "implementation_checklist": {
    "week1": ["Scaffold apps, CI/CD, auth wiring"],
    "week2": ["Tenant model, RBAC, org invites"],
    "week3_4": ["Schema + CSV ingest + seed data"],
    "week5": ["Skills profile UI + admin skill library"],
    "week6": ["Engine v1 + path UI + explanations"],
    "week7": ["Marketplace + apply flow + approvals"],
    "week8": ["Analytics v1 + events + dashboards"],
    "week9_10": ["Hardening + pilot onboarding"]
  }
}
